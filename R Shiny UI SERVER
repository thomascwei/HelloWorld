#ui.R

library(shiny)
library(plotly)

shinyUI(fluidPage(
  titlePanel("林園廠E化數據線上查詢"),
  sidebarLayout(
    sidebarPanel(
    #fluidRow(
      selectInput("line", "產線 - 反應器",   c("U1-375T3"='375T3',"U1-600T"="600T"
                                              ,"U2-375T1"="375T1","U2-375T2"="375T2"
                                              ,"U3-PC44"="PC44","U3-PC52"="PC52"),selected = NULL)
#      ,actionButton("action", label = "更新")
      ,selectInput("actVariable", "監測點",c())
      ,selectInput("duration", "單位平均時間",   c("天" = 10,
                                                 "小時" = 13,
                                                 "分" = 16
      ))
      ,dateRangeInput('dateRange',
                   label = '選擇日期區間'
                  # format = "%Y-%m-%d %H:%M:%S",
                   ,start = Sys.Date() - 200, end = Sys.Date() -198
                   ,language = "zh-TW"
      )
      ,fluidRow(
        column(6,
               sliderInput("start", "起始小時",
                           min =0 , max = 23, value = 0)),
       column(6,
              sliderInput("end", "結束小時",
                          min = 0, max = 23, value = 0)       
        ))
      ,fluidRow(
        column(4,
          radioButtons("plotType", "圖形種類:",
                    c("線圖" = "line",
                      "點圖" = "point")
        ))
      ,column(4,
          checkboxInput("show", "展示數據", FALSE)
        )
      ,column(4,
        downloadButton('downloadData', '數據下載')
        )
      )
      ,actionButton("action", label = "執行")

    )
    ,
    # Show the caption and plot of the requested variable against
    # mpg
    mainPanel(
      #h3(textOutput("tagText")),
      #plotlyOutput
      plotlyOutput("mpgPlot"),
      tableOutput("view")
      #textOutput("dateRangeText")
    )
  )

))

#server.R

library(shiny)
library(datasets)
library(reshape2)

shinyServer(function(input, output, session) {
    
  observe({
    tags=reactive({
      Query0 <-  paste("select	tag_name,tag_name+' '+tmemo tmemo FROM	[DCS_DATA_2015].[dbo].[DIM_DETAIL_TAGINFO]
                    where factory_code=8020 and reactor='",input$line,"'",sep='')
  
      library(RJDBC)
      drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver",
                  "/etc/jdbc/sqljdbc41.jar",
                  identifier.quote="`")
      conn <- dbConnect(drv, "jdbc:sqlserver://192.168.204.44:1433", "sa", "!qaz2wsx")
      
      tag=dbGetQuery(conn,Query0)
      tag
    })
    
    updateSelectInput(session, "actVariable", choices = setNames(tags()$tag_name,tags()$tmemo))
  })
  
 
  
#  Query <-  reactive({
#    paste("SELECT DCS#DATETIME,DCS#VALUE 
#                FROM DCS_DATA_2015.dbo.DCS_DATA_8020 
#                WHERE DCS#TAGCD = '",input$variable,"'",
#              " and	DCS#DATETIME >='",as.character(input$dateRange[1]),"'",
#              " and	DCS#DATETIME <'",as.character(input$dateRange[2]),"'"
#          ,sep = "")
#  })   
    
  RAW <- eventReactive(input$action,{
    #reactive({
    library(RJDBC)
    drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver",
                "/etc/jdbc/sqljdbc41.jar",
                identifier.quote="`")
    conn <- dbConnect(drv, "jdbc:sqlserver://192.168.204.44:1433", "sa", "!qaz2wsx")
    
    if(input$start<10){
      startDateTime=paste(as.character(input$dateRange[1]),' 0'
                          ,as.character(input$start),':00:00',sep='')
    } else{startDateTime=paste(as.character(input$dateRange[1]),' ',as.character(input$start),':00:00',sep='')}
    
    if(input$end<10){
      endDateTime=paste(as.character(input$dateRange[2]),' 0'
                          ,as.character(input$end),':00:00',sep='')
    } else{endDateTime=paste(as.character(input$dateRange[2]),' ',as.character(input$end),':00:00',sep='')}
        
    
    
    Query <-    paste("SELECT DCS#DATETIME DDATE,DCS#VALUE VALUE
                FROM DCS_DATA_2015.dbo.DCS_DATA_8020 
                WHERE DCS#TAGCD = '",input$actVariable,"'"
                  ," and	DCS#DATETIME >='",startDateTime,"'"
                  ," and	DCS#DATETIME <='",endDateTime,"'"      
            ,sep = "")


    RAW0 <- dbGetQuery(conn,Query)

    RAW0$DDATE=substr(RAW0$DDATE,1,input$duration)
    RAW1=aggregate(RAW0,by = list(RAW0$DDATE),FUN = mean,na.rm=T)
    RAW1$DDATE=NULL
    colnames(RAW1)[1]='DDATE'
    

    RAW1
  })
  
  output$mpgPlot <- renderPlotly({
    input$action
    library("ggplot2")
    library(plotly)
    
    dat.m=RAW()
    dat.m$tag='tag'
    if(input$plotType=="line"){
      p = ggplot(dat.m, aes(x=DDATE, y=VALUE, colour=tag, group=tag)) + geom_line()
    }else {p = ggplot(dat.m, aes(x=DDATE, y=VALUE, colour=tag, group=tag)) + geom_point()}
    p + xlab(" ") + ylab(" ")  + 
      theme(axis.text.x = element_text(colour="white"),legend.position="none") 
    ggplotly()
  })
  
  output$tagText  <- renderText({
    input$actVariable
    #isolate(Query())
  })
  
  output$view <- renderTable({
    input$action
    
    if(input$show){
      print(RAW(), row.names = FALSE)
    }
  })
  
  output$downloadData <- downloadHandler(
    #input$action
    
    filename = function() {
      paste('data-', Sys.Date(), '.csv', sep='')
    },
    content = function(con) {
      write.csv(RAW(), con)
    }
  )
  
})
